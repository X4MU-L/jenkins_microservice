---
- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - python3-pip
      - docker.io
    state: present
    update_cache: true
  become: true
  tags:
    - jenkins
    - packages

- name: Install Python kubernetes module
  ansible.builtin.apt:
    name:
      - python3-kubernetes
    state: present
  become: true
  tags:
    - jenkins
    - packages

- name: Check if kubectl checksum file exists
  ansible.builtin.stat:
    path: /usr/local/bin/kubectl.sha256
  register: kubectl_checksum_file
  tags:
    - kubectl
    - jenkins
    - packages

- name: Download kubectl checksum file
  ansible.builtin.get_url:
    url: "https://dl.k8s.io/release/{{ lookup('url', 'https://dl.k8s.io/release/stable.txt') }}/bin/linux/amd64/kubectl.sha256"
    dest: /usr/local/bin/kubectl.sha256
    mode: "0644"
  tags:
    - kubectl
    - jenkins
    - packages
  when: not kubectl_checksum_file.stat.exists

- name: Download latest kubectl binary
  ansible.builtin.get_url:
    url: "https://dl.k8s.io/release/{{ lookup('url', 'https://dl.k8s.io/release/stable.txt') }}/bin/linux/amd64/kubectl"
    dest: /usr/local/bin/kubectl
    mode: "0755"
  tags:
    - kubectl
    - jenkins
    - packages

- name: Validate kubectl checksum
  ansible.builtin.shell: |
    bash -o pipefail -c 'echo "$(cat /usr/local/bin/kubectl.sha256)  /usr/local/bin/kubectl" | sha256sum --check'
  register: checksum_result
  failed_when: "'OK' not in checksum_result.stdout"
  changed_when: false
  tags:
    - kubectl
    - jenkins
    - packages

- name: Install kubectl to /usr/local/bin
  ansible.builtin.command: sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
  args:
    creates: /usr/local/bin/kubectl
  tags:
    - kubectl
    - jenkins
    - packages

- name: Verify kubectl installation
  ansible.builtin.command: kubectl version --client --output=yaml
  register: kubectl_version
  changed_when: false
  tags:
    - kubectl
    - jenkins
    - packages

- name: Print kubectl version
  ansible.builtin.debug:
    var: kubectl_version.stdout

- name: Add ubuntu user to docker group
  ansible.builtin.user:
    name: ubuntu
    groups: docker
    append: true
  become: true
  tags:
    - jenkins
    - packages
    - kubernetes

- name: Wait for group membership to apply
  ansible.builtin.pause:
    seconds: 5
  tags:
    - jenkins
    - packages
    - kubernetes

- name: Download k3s install script
  ansible.builtin.get_url:
    url: https://get.k3s.io
    dest: /tmp/get_k3s.sh
    mode: "0755"
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Install k3s
  ansible.builtin.command: /tmp/get_k3s.sh
  args:
    creates: /usr/local/bin/k3s
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Wait for k3s to be ready
  ansible.builtin.wait_for:
    path: /etc/rancher/k3s/k3s.yaml
    state: present
    delay: 5
    timeout: 300
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Create .kube directory for root
  ansible.builtin.file:
    path: /root/.kube
    state: directory
    mode: "0755"
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Copy k3s config for root
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /root/.kube/config
    remote_src: true
    mode: "0600"
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Create .kube directory for ubuntu user
  ansible.builtin.file:
    path: /home/ubuntu/.kube
    state: directory
    mode: "0755"
    owner: ubuntu
    group: ubuntu
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Copy k3s config for ubuntu user
  ansible.builtin.copy:
    src: /etc/rancher/k3s/k3s.yaml
    dest: /home/ubuntu/.kube/config
    remote_src: true
    owner: ubuntu
    group: ubuntu
    mode: "0600"
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Create directory for Jenkins data
  ansible.builtin.file:
    path: /data/jenkins
    state: directory
    mode: "0755"
  become: true
  tags:
    - jenkins
    - setup

- name: Read GitHub SSH private key
  ansible.builtin.slurp:
    src: "~/.ssh/github_ssh_without_phrase"
  register: github_ssh
  delegate_to: localhost
  become: false
  tags:
    - jenkins
    - secrets

- name: Read known_hosts file
  ansible.builtin.slurp:
    src: "~/.ssh/known_hosts"
  register: known_hosts
  delegate_to: localhost
  become: false
  tags:
    - jenkins
    - secrets

- name: Get ansible directory path
  ansible.builtin.shell: pwd
  register: ansible_dir
  delegate_to: localhost
  become: false
  tags:
    - jenkins
    - kubernetes
    - setup

- name: Get project root (parent of ansible/)
  ansible.builtin.set_fact:
    project_root: "{{ ansible_dir.stdout | dirname }}"
  tags:
    - jenkins
    - kubernetes
    - setup

- name: Read .env file and store to env_lines
  ansible.builtin.command: bash -c 'set -o pipefail && cat "{{ project_root }}/.env" | grep -v "^#" | grep "="'
  register: env_lines
  delegate_to: localhost
  become: false
  tags:
    - jenkins
    - kubernetes
    - setup

- name: Initialize env_vars dictionary for storing .env values
  ansible.builtin.set_fact:
    env_vars: {}
  tags:
    - jenkins
    - kubernetes
    - setup

- name: Process each line of .env file
  ansible.builtin.set_fact:
    env_vars: "{{ env_vars | combine({ item.split('=')[0]: item.split('=', 1)[1] | trim('\"') }) }}"
  loop: "{{ env_lines.stdout_lines }}"
  when: item | length > 0
  tags:
    - jenkins
    - kubernetes
    - setup

- name: Show parsed env vars
  ansible.builtin.debug:
    msg: "{{ env_vars.APP_NAME }} {{ env_vars.APP_VERSION }}"
  tags:
    - jenkins
    - kubernetes
    - setup

- name: Get AWS Server SSH key
  ansible.builtin.slurp:
    src: "~/.ssh/{{ env_vars.APP_NAME }}-key.pem"
  register: aws_server_ssh
  delegate_to: localhost
  become: false
  tags:
    - jenkins
    - secrets

- name: Set GitHub SSH Private Key
  ansible.builtin.set_fact:
    github_ssh_private_key: "{{ github_ssh.content | b64decode }}"
  tags:
    - jenkins
    - secrets

- name: Create directory for kubernetes manifests
  ansible.builtin.file:
    path: /home/ubuntu/kubernetes
    state: directory
    mode: "0755"
    owner: ubuntu
    group: ubuntu
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Create Kubernetes secret file on remote
  ansible.builtin.copy:
    dest: "/home/ubuntu/kubernetes/jenkins-secret.yaml"
    content: |
      apiVersion: v1
      kind: Secret
      metadata:
        name: {{ env_vars.SECRET_NAME_VOLUME_KEY }}
        namespace: jenkins
      type: Opaque
      data:
        id_rsa: "{{ github_ssh.content }}"
        aws_server_ssh: "{{ aws_server_ssh.content }}"
        known_hosts: "{{ known_hosts.content }}"
    mode: "0600"
  become: true
  tags:
    - jenkins
    - kubernetes
    - secrets

- name: Copy Jenkins kubernetes manifest
  ansible.builtin.template:
    src: jenkins.yaml.j2
    dest: /home/ubuntu/kubernetes/jenkins.yaml
    owner: ubuntu
    group: ubuntu
    mode: "0644"
  become: true
  vars:
    secret_name_volume_key: "{{ env_vars.SECRET_NAME_VOLUME_KEY }}"
    node_port: "{{ env_vars.NODE_PORT }}"
    container_port: "{{ env_vars.CONTAINER_PORT }}"
    agent_port: "{{ env_vars.AGENT_PORT }}"
    agent_node_port: "{{ env_vars.AGENT_NODE_PORT }}"
  tags:
    - jenkins
    - kubernetes

- name: Create jenkins Namesapce
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: jenkins
    apply: true
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Apply kubernetes secrets
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/kubernetes/jenkins-secret.yaml
    apply: true
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Apply kubernetes manifests
  kubernetes.core.k8s:
    state: present
    src: /home/ubuntu/kubernetes/jenkins.yaml
    apply: true
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Wait for Jenkins pod to be ready
  ansible.builtin.command: kubectl wait --namespace=jenkins --for=condition=ready pod --selector=app=jenkins --timeout=300s
  register: jenkins_ready
  changed_when: false
  tags:
    - jenkins
    - kubernetes

- name: Get Jenkins pod name
  ansible.builtin.command: kubectl get pod -n jenkins -l app=jenkins -o jsonpath='{.items[0].metadata.name}'
  register: jenkins_pod
  changed_when: false
  tags:
    - jenkins
    - kubernetes

- name: Get Jenkins initial admin password
  ansible.builtin.command: kubectl exec -n jenkins {{ jenkins_pod.stdout }} -- cat /var/jenkins_home/secrets/initialAdminPassword
  register: jenkins_password
  changed_when: false
  tags:
    - jenkins
    - kubernetes

- name: Print Jenkins initial admin password
  ansible.builtin.debug:
    msg: "Jenkins initial admin password is: {{ jenkins_password.stdout }}"
  tags:
    - jenkins
    - kubernetes

- name: Set Jenkins Admin Password
  ansible.builtin.set_fact:
    jenkins_admin_password: "{{ jenkins_password.stdout }}"
  tags:
    - jenkins
    - Kubernetes

# - name: Add Jenkins SSH Key Credential
#   ansible.builtin.uri:
#     url: "http://localhost:{{ env_vars.NODE_PORT }}/credentials/store/system/domain/_/createCredentials"
#     method: POST
#     user: "admin"
#     password: "{{ jenkins_admin_password }}"
#     headers:
#       Content-Type: "application/json"
#     body_format: json
#     body:
#       "": "0"
#       "credentials":
#         "scope": "GLOBAL"
#         "id": "jenkins-github-ssh-key"
#         "username": "git"
#         "privateKeySource":
#           "value": "directEntry"
#           "privateKey": "{{ github_ssh_private_key }}"
#         "description": "GitHub SSH Key"
#         "stapler-class": "com.cloudbees.plugins.credentials.impl.BasicSSHUserPrivateKey"
#     status_code: 200, 201
#   tags:
#     - jenkins
#     - kubernetes

- name: Install Java for Jenkins CLI
  ansible.builtin.apt:
    name: openjdk-17-jre-headless
    state: present
    update_cache: true
  become: true
  tags:
    - jenkins
    - kubernetes

- name: Download Jenkins CLI JAR
  ansible.builtin.get_url:
    url: "http://localhost:{{ env_vars.NODE_PORT }}/jnlpJars/jenkins-cli.jar"
    dest: "/tmp/jenkins-cli.jar"
    mode: '0644'
  tags:
    - jenkins
    - kubernetes

- name: Create user creation groovy template
  ansible.builtin.template:
    src: user-creation.groovy.j2
    dest: /tmp/create_user.groovy
    mode: "0644"
  vars:
    new_user_id: "admin23"
    new_user_email: "okolisamuel1@gmail.com"
    new_user_password: "password123"
  tags:
    - jenkins
    - kubernetes

- name: Create Jenkins User with Groovy
  ansible.builtin.command:
    cmd: >
      java -jar /tmp/jenkins-cli.jar -auth admin:{{ jenkins_admin_password }} -s http://localhost:{{ env_vars.NODE_PORT }} groovy /tmp/create_user.groovy
  changed_when: false
  tags:
    - jenkins
    - kubernetes

- name: Copy and create SSH Credential XML file
  ansible.builtin.copy:
    content: |
      <com.cloudbees.plugins.credentials.impl.BasicSSHUserPrivateKey>
        <scope>GLOBAL</scope>
        <id>jenkins-github-ssh-key</id>
        <description>GitHub SSH Key</description>
        <username>git</username>
        <privateKeySource class="com.cloudbees.plugins.credentials.impl.BasicSSHUserPrivateKey$DirectEntryPrivateKeySource">
          <privateKey>{{ github_ssh_private_key }}</privateKey>
        </privateKeySource>
      </com.cloudbees.plugins.credentials.impl.BasicSSHUserPrivateKey>
    dest: /tmp/credential.xml
    mode: "0600"
  tags:
    - jenkins
    - kubernetes

- name: Create credentials using Jenkins CLI
  ansible.builtin.command:
    cmd: |
      java -jar /tmp/jenkins-cli.jar -s http://localhost:{{ env_vars.NODE_PORT }} \
      -auth admin23:password123 create-credentials-by-xml system::system::jenkins _ < /tmp/credential.xml
  register: cli_result
  changed_when: false
  tags:
    - jenkins
    - kubernetes
