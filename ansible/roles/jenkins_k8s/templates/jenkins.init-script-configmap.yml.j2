apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-init-scripts
  namespace: jenkins
data:
  00-install-plugins.groovy: |
    #!/usr/bin/env groovy

    import jenkins.model.*
    import hudson.PluginManager
    import hudson.model.UpdateSite

    def instance = Jenkins.getInstance()
    def pm = instance.getPluginManager()
    def uc = instance.getUpdateCenter()

    def plugins = [
        "sshd",  // SSHD Plugin
        "git",   // Git Plugin
        "workflow-aggregator", // Pipeline Plugin
        "credentials", // Credentials Plugin
        "matrix-auth" // Authorization Plugin
    ]

    plugins.each { pluginName ->
        if (!pm.getPlugin(pluginName)) {
            println "Installing plugin: ${pluginName}"
            def plugin = uc.getPlugin(pluginName)
            if (plugin) {
                plugin.deploy().get()
                println "${pluginName} installed successfully!"
            } else {
                println "Plugin ${pluginName} not found in update center!"
            }
        } else {
            println "Plugin ${pluginName} is already installed."
        }
    }

    instance.save()
    println("Plugin installation script completed.")

  01-security.groovy: |
    #!/usr/bin/env groovy

    import jenkins.model.*
    import hudson.security.*
    import org.jenkinsci.plugins.workflow.libs.*
    import jenkins.plugins.git.*
    import hudson.tasks.Mailer
    import org.jenkinsci.main.modules.sshd.SSHD

    def instance = Jenkins.getInstance()

    // Create admin user
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount("{{ jenkins_admin_username }}", "{{ jenkins_admin_password }}")
    instance.setSecurityRealm(hudsonRealm)

    def strategy = new hudson.security.GlobalMatrixAuthorizationStrategy()
    strategy.add(Jenkins.ADMINISTER, "{{ jenkins_admin_username }}")
    strategy.add(Jenkins.READ, "authenticated")
    instance.setAuthorizationStrategy(strategy)

    // Enable SSH server
    SSHD sshd = SSHD.get()
    sshd.setPort(22)
    sshd.start()

    instance.save()
    println("Security setup completed with SSH enabled")

  02-ssh-cli-auth.groovy: |
    #!/usr/bin/env groovy

    import jenkins.model.*
    import hudson.model.*
    import hudson.security.*
    import org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl
    import java.util.logging.Logger
    import java.util.logging.Level

    /**
    * Jenkins initialization script to configure SSH CLI authentication
    * with comprehensive error handling and logging
    */

    // Initialize logging
    def logger = Logger.getLogger("jenkins.ssh.cli.setup")
    logger.info("Starting SSH CLI authentication configuration")

    try {
        // Get Jenkins instance
        def jenkins = Jenkins.getInstance()
        if (jenkins == null) {
            throw new Exception("Jenkins instance is not available")
        }
        
        // Configuration parameters
        def adminUsername = "{{ jenkins_admin_username }}"
        // "jenkins_ssh_public_key_path" is a Jinja variable passed from Ansible
        def publicKey =   new File({{ jenkins_ssh_public_key_path | default('/var/jenkins_home/.ssh/jenkins-ssh-public-key.pub') }}).text 
        
        println("KEY: ${publicKey}")

        // Verify security realm is set up
        def securityRealm = jenkins.getSecurityRealm()
        if (securityRealm == null || !(securityRealm instanceof SecurityRealm)) {
            throw new Exception("Security realm not properly configured")
        }
        
        // Use User.get instead of direct UserDetails access
        logger.info("Looking up user: ${adminUsername}")
        def user = User.get(adminUsername, false) // false = don't create if doesn't exist
        
        if (user == null) {
            logger.warning("User ${adminUsername} not found. Checking if we need to create it.")
            
            // Check if we're using Jenkins own user database
            if (securityRealm instanceof HudsonPrivateSecurityRealm) {
                logger.info("Using HudsonPrivateSecurityRealm - can create user if needed")
                // Only create user if using Jenkins' own user database
                user = User.get(adminUsername, true) // true = create if doesn't exist
                logger.info("Created user: ${adminUsername}")
            } else {
                throw new Exception("User ${adminUsername} not found and cannot be created with current security realm")
            }
        }
        
        // Get or create SSH user property
        def sshProperty = user.getProperty(UserPropertyImpl.class)
        if (sshProperty == null) {
            logger.info("Adding SSH property to user ${adminUsername}")
            sshProperty = new UserPropertyImpl()
            user.addProperty(sshProperty)
        } else {
            logger.info("Updating existing SSH property for user ${adminUsername}")
        }
        
        // Set the authorized key
        def currentKeys = sshProperty.authorizedKeys ?: ""
        if (!currentKeys.contains(publicKey.trim())) {
            logger.info("Setting new authorized SSH key")
            sshProperty.authorizedKeys = publicKey.trim()
            user.save()
            logger.info("SSH key saved successfully")
        } else {
            logger.info("SSH key already configured - no changes needed")
        }
        
        // Verify the changes
        def verifyProperty = user.getProperty(UserPropertyImpl.class)
        if (verifyProperty == null || !verifyProperty.authorizedKeys.contains(publicKey.trim())) {
            throw new Exception("Failed to verify SSH key configuration")
        }
        
        logger.info("SSH CLI authentication successfully configured for user: ${adminUsername}")
        println("SSH CLI authentication successfully configured for user: ${adminUsername}")
        
    } catch (ClassNotFoundException e) {
        // Handle case where SSH CLI plugin is not installed
        logger.log(Level.SEVERE, "SSH CLI plugin not installed or incompatible. Error: ${e.message}", e)
        println("ERROR: SSH CLI plugin not installed or incompatible. Please install the SSH CLI Authentication plugin.")
        e.printStackTrace()
        
    } catch (Exception e) {
        // Handle all other exceptions
        logger.log(Level.SEVERE, "Failed to configure SSH CLI authentication. Error: ${e.message}", e)
        println("ERROR: Failed to configure SSH CLI authentication: ${e.message}")
        e.printStackTrace()
    }


    #!/usr/bin/env groovy

    // Import the PipelineJobCreator class
    def pipelineCreatorScript = new File("/var/jenkins_home/function_scripts/PipelineJobCreator.groovy")
    def pipelineCreatorClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(pipelineCreatorScript)
    def pipelineCreator = pipelineCreatorClass.newInstance()

    // Import the environment utils class
    def envUtilsScript = new File("${JENKINS_HOME}/function-scripts/create-environment-vars.groovy")
    def envUtilsClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(envUtilsScript)
    def envUtils = envUtilsClass.newInstance()

    // Template values from Jinja
    def config = [
        repoUrl: "{{ repo_url }}",
        branches: {{ branches | default("['**/main']") }},
        jenkinsfilePath: "{{ jenkinsfile_path | default('Jenkinsfile') }}",
        credentialsId: "{{ git_credentials_id | default('github-credentials') }}",
        enableWebhook: {{ enable_webhook | default('true') }}
    ]

    // Run the pipeline creation function
    def result = pipelineCreator.processPipelines(config)

    // Set environment variables if needed
    {% if docker_username is defined %}
    def envVars = [
        "DOCKERHUB_USERNAME": "{{ docker_username }}",
        "GITHUB_USERNAME": config.repoUrl.tokenize(':')[1].tokenize('/')[0],
        "GITHUB_REPO_NAME": config.repoUrl.tokenize('/')[-1].replace('.git', '')
    ]
    envUtils.setGlobalEnvironmentVariables(envVars)
    {% endif %}

    return result
  03-create-github-credentials.groovy: |
    #!/usr/bin/env groovy

    // Import the GitHubCredentialsCreator class
    def credentialsCreatorScript = new File("/var/jenkins_home/function_scripts/GitHubCredentialsCreator.groovy")
    def credentialsCreatorClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(credentialsCreatorScript)
    def credentialsCreator = credentialsCreatorClass.newInstance()

    // Template values from Jinja
    def config = [
        credentialsId: "{{ git_credentials_id | default('github-credentials') }}",
        description: "{{ git_description | default('GitHub SSH Credentials') }}",
        username: "{{ git_user | default('git') }}",
        sshKeyPath: "{{ github_ssh_key_path | default('/var/jenkins_home/.ssh/github-ssh-key') }}"
    ]

    // Run the credentials creation function
    def result = credentialsCreator.processCredentials(config)

    return result
  04-create-aws-credentials.groovy: |
    #!/usr/bin/env groovy

    // Import the GitHubCredentialsCreator class
    def credentialsCreatorScript = new File("/var/jenkins_home/function_scripts/GitHubCredentialsCreator.groovy")
    def credentialsCreatorClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(credentialsCreatorScript)
    def credentialsCreator = credentialsCreatorClass.newInstance()

    // Template values from Jinja
    def config = [
        credentialsId: "{{ aws_credentials_id | default('aws-credentials') }}",
        description: "{{ aws_description | default('Aws SSH Credentials') }}",
        username: "{{ ansible_user | default('ubuntu') }}",
        sshKeyPath: "{{ aws_ssh_key_path | default('/var/jenkins_home/.ssh/aws-server-key.pem') }}"
    ]

    // Run the credentials creation function
    def result = credentialsCreator.processCredentials(config)

    return result
  05-create-dockerhub-credentials.groovy: |
    #!/usr/bin/env groovy

    // Import the DockerHubCredentialsCreator class
    def credentialsCreatorScript = new File("/var/jenkins_home/function_scripts/create-simple-credentials.groovy")
    def credentialsCreatorClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(credentialsCreatorScript)
    def credentialsCreator = credentialsCreatorClass.newInstance()

    // Template values from Jinja
    def config = [
        username: "{{ dockerhub_username }}", // Required
        password: "{{ dockerhub_password }}", // Required
        credentialsId: "{{ docker_credentials_id | default('dockerhub-credentials') }}",
        description: "{{ docker_description | default('DockerHub Credentials') }}"
    ]

    // Run the credentials creation function
    def result = credentialsCreator.processCredentials(config)

    return result
  06-create-pipeline-job.groovy: |
    #!/usr/bin/env groovy

    // Import the PipelineJobCreator class
    def pipelineCreatorScript = new File("${JENKINS_HOME}/function_scripts/create-pipeline-job.groovy")
    def pipelineCreatorClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(pipelineCreatorScript)
    def pipelineCreator = pipelineCreatorClass.newInstance()

    // Import the environment utils class
    def envUtilsScript = new File("${JENKINS_HOME}/function_scripts/create-environment-vars.groovy")
    def envUtilsClass = new GroovyClassLoader(getClass().getClassLoader()).parseClass(envUtilsScript)
    def envUtils = envUtilsClass.newInstance()

    // Template values from Jinja
    def config = [
        repoUrl: "{{ git_repo_url }}",
        branches: {{ branches | default("['**/main']") }},
        jenkinsfilePath: "{{ jenkinsfile_path | default('Jenkinsfile') }}",
        credentialsId: "{{ git_credentials_id | default('github-credentials') }}",
        enableWebhook: {{ enable_webhook | default('true') }}
    ]

    // Run the pipeline creation function
    def result = pipelineCreator.processPipelines(config)

    // Set environment variables if needed
    {% if docker_username is defined %}
    def envVars = [
        "DOCKERHUB_USERNAME": "{{ docker_username }}",
        "GITHUB_USERNAME": config.repoUrl.tokenize(':')[1].tokenize('/')[0],
        "GITHUB_REPO_NAME": config.repoUrl.tokenize('/')[-1].replace('.git', '')
    ]
    envUtils.setGlobalEnvironmentVariables(envVars)
    {% endif %}

    return result